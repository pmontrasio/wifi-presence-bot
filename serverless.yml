service: presence-bot

provider:
  name: aws
  runtime: nodejs4.3

  stage: dev
  region: eu-west-1

  iamRoleStatements:
  - Effect: "Allow"
    Action:
    - dynamodb:GetRecords
    - dynamodb:GetShardIterator
    - dynamodb:DescribeStream
    - dynamodb:ListStreams
    Resource:
    - "Fn::Join": ["", ["arn:aws:dynamodb:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":table/Presences*"]]

  - Effect: "Allow"
    Action:
    - dynamodb:PutItem
    - dynamodb:DeleteItem
    - dynamodb:Scan
    Resource:
    - "Fn::Join": ["", ["arn:aws:dynamodb:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":table/Users*"]]

package:
  exclude:
  - .env
  - event.json
  - "handler.js~"
  - "secrets.json~"
  - README.md

functions:
  presenceAlertWebhook:
    handler: handler.presenceAlertWebhook
    events:
    # curl -X POST https://XXXXXXXX.execute-api.eu-west-1.amazonaws.com/dev/presenceAlertWebhook ... from Telegram
    - http: POST presenceAlertWebhook
  presenceNotifier:
    handler: handler.presenceNotifier
    events:
    - stream:
      arn: arn:aws:dynamodb:eu-west-1:886357831788:table/Presences/stream/2016-10-11T14:03:05.258
      startingPosition: LATEST
      batchSize: 1
      enabled: true

resources:
  Resources:
    UsersTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
        - AttributeName: "userId"
          AttributeType: "N"
        KeySchema:
        - AttributeName: "userId"
          KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "Users"
